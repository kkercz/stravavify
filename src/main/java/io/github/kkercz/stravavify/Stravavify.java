package io.github.kkercz.stravavify;

import io.github.kkercz.stravavify.connector.spotify.SpotifyConnector;
import io.github.kkercz.stravavify.connector.strava.StravaConnector;
import io.github.kkercz.stravavify.model.Activity;
import io.github.kkercz.stravavify.model.Song;

import java.io.IOException;
import java.time.Duration;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import static io.github.kkercz.stravavify.util.StringUtils.cleanUp;
import static io.github.kkercz.stravavify.util.StringUtils.joinWithLimit;

public class Stravavify {
    private final SpotifyConnector spotifyConnector;
    private final StravaConnector stravaConnector;

    public Stravavify(SpotifyConnector spotifyConnector, StravaConnector stravaConnector) {
        this.spotifyConnector = spotifyConnector;
        this.stravaConnector = stravaConnector;
    }

    public void updateDescriptionWithSongs() throws Exception {

        List<Song> recentSongs = spotifyConnector.getRecentSongs();
        Optional<Activity> latestActivityWithEmptyDescription = stravaConnector
                .getLatestActivity(Duration.ofHours(24))
                .filter(a -> a.description() == null || a.description().isBlank());

        if (latestActivityWithEmptyDescription.isEmpty()) {
            System.out.println("No activity with empty description in the last 24 hours found");
            return;
        }

        Activity activity = latestActivityWithEmptyDescription.get();
        List<Song> activityPlaylist = recentSongs.stream()
                .filter(song -> wasPlayedDuringActivity(activity, song))
                .toList();

        if (!activityPlaylist.isEmpty()) {
            updateDescription(activity, activityPlaylist);
        } else {
            System.out.println("No songs found for activity " + activity.id());
        }
    }

    private void updateDescription(Activity activity, List<Song> activityPlaylist) throws IOException {
        String description = String.format(
                """
                        ðŸŽ§ Workout Soundtrack ðŸŽ§
                        
                        %s
                        
                        (Generated by Stravavify â€“ https://github.com/kkercz/stravavify)
                        """, activityPlaylist.stream().map(this::format).collect(Collectors.joining("\n")));

        System.out.println("Updating activity " + activity.id() + "\n\n" + description);

        stravaConnector.updateDescription(activity.id(), description);
    }

    private boolean wasPlayedDuringActivity(Activity activity, Song song) {
        return song.time().intersects(activity.time());
    }


    private String format(Song song) {
        return String.format(
                "âž¤ %s \uD83C\uDFA4 %s \uD83D\uDCBF %s",
                cleanUp(song.title()),
                joinWithLimit(song.artists()),
                cleanUp(song.album()));
    }
}
