package io.github.kkercz.stravavify;

import io.github.kkercz.stravavify.connector.spotify.SpotifyConnector;
import io.github.kkercz.stravavify.connector.spotify.model.Song;
import io.github.kkercz.stravavify.connector.strava.StravaConnector;
import io.github.kkercz.stravavify.connector.strava.model.Activity;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import static io.github.kkercz.stravavify.util.StringUtils.cleanUp;
import static io.github.kkercz.stravavify.util.StringUtils.joinWithLimit;

public class Stravavify {
    private final SpotifyConnector spotifyConnector;
    private final StravaConnector stravaConnector;

    public Stravavify(SpotifyConnector spotifyConnector, StravaConnector stravaConnector) {
        this.spotifyConnector = spotifyConnector;
        this.stravaConnector = stravaConnector;
    }

    public void updateDescriptionWithSongs() throws Exception {

        List<Song> recentSongs = spotifyConnector.getRecentSongs();
        Optional<Activity> latestActivityWithEmptyDescription = stravaConnector
                .getLatestActivity()
                .filter(a -> a.description() == null || a.description().isBlank());

        if (latestActivityWithEmptyDescription.isEmpty()) {
            System.out.println("No activity with empty description in the last 24 hours found");
            return;
        }

        Activity activity = latestActivityWithEmptyDescription.get();
        List<Song> activityPlaylist = recentSongs.stream()
                .filter(song -> playedDuringActivity(activity, song))
                .toList();

        if (!activityPlaylist.isEmpty()) {

            String description = String.format(
                    """
                            ðŸŽ§ Workout Soundtrack ðŸŽ§
                            
                            %s
                            
                            (Generated by Stravavify â€“ https://github.com/kkercz/stravavify)
                            """, activityPlaylist.stream().map(this::format).collect(Collectors.joining("\n")));

            System.out.println("Updating activity " + activity.id() + "\n\n" + description);

            stravaConnector.updateDescription(activity.id(), description);
        }
    }

    private boolean playedDuringActivity(Activity activity, Song song) {
        LocalDateTime start = activity.startTime();
        LocalDateTime end = start.plus(activity.duration());
        return withinBounds(song.playedAt(), start, end) ||
                withinBounds(song.playedAt().plus(song.duration()), start, end);
    }

    private boolean withinBounds(LocalDateTime point, LocalDateTime start, LocalDateTime end) {
        return point.isAfter(start) && point.isBefore(end);
    }

    private String format(Song song) {
        return String.format(
                "âž¤ %s \uD83C\uDFA4 %s \uD83D\uDCBF %s",
                cleanUp(song.title()),
                joinWithLimit(song.artists()),
                cleanUp(song.album()));
    }
}
